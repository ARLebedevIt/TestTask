{"version":3,"file":"static/js/Posts.4d2829bc.chunk.js","mappings":"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","sources":["api/instanceAPI.ts","api/postsAPI.ts","api/usersAPI.ts","components/Posts/Post/Post.tsx","components/Posts/PostList/PostList.tsx","components/Navbar/UsersFilter/UsersFilter.tsx","components/Navbar/LimitFilter/LimitFilter.tsx","components/Navbar/Navbar.tsx","components/Posts/Posts.tsx"],"sourcesContent":["import axios from 'axios';\r\n\r\nexport const instanceAPI = axios.create(\r\n  {\r\n    baseURL: 'https://jsonplaceholder.typicode.com/',\r\n    headers: {\r\n      'Content-type': 'application/json; charset=UTF-8',\r\n    },\r\n})","import { PostType } from \"../types/postsTS\"\r\nimport { instanceAPI } from \"./instanceAPI\"\r\n\r\nexport const postsAPI = {\r\n  getPosts(limit: string, page: string) {\r\n    return instanceAPI.get<PostType[]>(`posts?_limit=${limit}&_page=${page}`).then(res => res.data).catch(err => err)\r\n  },\r\n  getUserPosts(id: string, limit: string, page: string) {\r\n    return instanceAPI.get<PostType[]>(`posts?userId=${id}&_limit=${limit}&_page=${page}`).then(res => res.data).catch(err => err)\r\n  },\r\n  getCurrPost(id: string) {\r\n    return instanceAPI.get<PostType[]>(`posts/${id}`).then(res => res.data).catch(err => err)\r\n  },\r\n}","import { instanceAPI } from \"./instanceAPI\"\r\n\r\nexport const usersAPI = {\r\n  getUsers(page: string) {\r\n    return instanceAPI.get(`users?_page=${page}`).then(res => res.data).catch(err => err)\r\n  },\r\n  getCurrUser(id: string) {\r\n    return instanceAPI.get(`users/${id}`).then(res => res.data).catch(err => err)\r\n  }\r\n}","import React, { FC } from 'react'\r\nimport { PostType } from '../../../types/postsTS'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { Box, Container, Typography } from '@mui/material'\r\n\r\ntype Props = {\r\n  post: PostType\r\n}\r\n\r\nconst Post: FC<Props> = ({ post }) => {\r\n  const navigate = useNavigate()\r\n  return (\r\n    <Container disableGutters maxWidth={false} onClick={() => navigate(`/posts/${post.id}`, { replace: false })}>\r\n      <Box sx={{ display: 'flex', gap: '10px', flexDirection: 'column' }}>\r\n        <Box>\r\n          <Typography>{`Название: ${post.title}`}</Typography>\r\n        </Box>\r\n        <Box>\r\n          <Typography>{`Содержимое: ${post.body}`}</Typography>\r\n        </Box>\r\n      </Box>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Post","import React, { Dispatch, FC, SetStateAction, memo, useEffect, useState } from 'react'\r\nimport { PostType } from '../../../types/postsTS'\r\nimport Post from '../Post/Post'\r\nimport { postsAPI } from '../../../api/postsAPI'\r\nimport List from '@mui/material/List';\r\nimport ListItem from '@mui/material/ListItem';\r\nimport ListItemButton from '@mui/material/ListItemButton';\r\nimport { Alert, Box, Container, Snackbar, Typography, useTheme } from '@mui/material';\r\nimport { useInView } from 'react-intersection-observer';\r\nimport { useLocation, useSearchParams } from 'react-router-dom';\r\nimport { QueryType } from '../../../types/urlQueryTS';\r\n\r\ntype Props = {\r\n  posts: PostType[] | null\r\n  setPosts: Dispatch<SetStateAction<PostType[] | null>>\r\n  currUser: string | null\r\n  setUser: Dispatch<SetStateAction<string | null>>\r\n  currLimit: string\r\n}\r\n\r\nconst PostList: FC<Props> = memo(({ posts, setPosts, currUser, setUser, currLimit }) => {\r\n  const { palette: { mode } } = useTheme()\r\n  const [searchParams, setSearchParams] = useSearchParams();\r\n  let [currPage, setPage] = useState<number>(1)\r\n  const [notFound, setNotFound] = useState<boolean>(false) // для Notification о том, что User не найден\r\n  const location = useLocation()\r\n  const query: QueryType = { page: currPage, limit: currLimit }\r\n  const [statusPosts, setPostsStatus] = useState<boolean>(false)  // для Notification о том, что загружены все посты по фильтру\r\n  const { ref, inView } = useInView({\r\n    threshold: 0,\r\n  });\r\n  /* В каждом useEffect мы объявляем переменную actualPage, что бы занести актуальное значение currPage, т.к. запрос на сервер уходит до того как \r\n   сработает setPage(++currPage), setPage(prev => ++prev) и тд.\r\n    Зачастую запросы на сервер делаются строго в строковом формате, поэтому операции мы проводим над типом number, а уже итоговый результат приобразуем\r\n    в строку +currPage > 1 ? '0' : `${currPage}`\r\n  */\r\n\r\n  // Запрос всех постов / постов конкретного пользователя\r\n  useEffect(() => {\r\n    const fetchUserPosts = async () => {\r\n      if (currUser == null) {\r\n        let result = await postsAPI.getPosts(currLimit, `${currPage}`)\r\n        setPosts(result)\r\n        delete query.userId\r\n        //@ts-ignore\r\n        setSearchParams(new URLSearchParams(query))\r\n      }\r\n      if (currUser != null) {\r\n        setPage(1)\r\n        let actualPage = currPage\r\n        query.page = actualPage\r\n        query.userId = currUser\r\n        const result = await postsAPI.getUserPosts(currUser!, currLimit, +currPage > 1 ? '0' : `${currPage}`)\r\n        setPosts(result)\r\n        //@ts-ignore\r\n        setSearchParams(new URLSearchParams(query))\r\n      }\r\n    }\r\n    fetchUserPosts()\r\n  }, [currUser, currLimit])\r\n  // Запрос постов пользователя по URL Query posts?page=1&userId={...}\r\n  useEffect(() => {\r\n    setSearchParams(location.search)\r\n    let parsed = Object.fromEntries([...searchParams])\r\n    if (+parsed.userId <= 10) { // нам заранее известно кол-во юзеров, но в проде можно прокинуть user.length из компоненты Users\r\n      setUser(parsed.userId)\r\n    } else if (+parsed.userId > 10) {\r\n      setNotFound(true);\r\n      setUser(null)\r\n    }\r\n  }, [searchParams])\r\n  // Автоматическая подгрузка постов, для конкретного пользователя, а так же для всех постов\r\n  useEffect(() => {\r\n    const fetchMorePosts = async () => {\r\n      if (inView) {\r\n        setPage(++currPage)\r\n        let actualPage = currPage\r\n        query.page = actualPage\r\n        let result: PostType[]\r\n        if (currUser) {\r\n          result = await postsAPI.getUserPosts(currUser!, currLimit, `${currPage}`); query.userId = currUser;\r\n        } else result = await postsAPI.getPosts(currLimit, `${currPage}`);\r\n        setPosts(prev => [...prev!, ...result])\r\n        result.length < 1 && setPostsStatus(true)\r\n        //@ts-ignore\r\n        setSearchParams(new URLSearchParams(query))\r\n      }\r\n    }\r\n    fetchMorePosts()\r\n  }, [inView])\r\n  return (\r\n    <>\r\n      <Container maxWidth={false}>\r\n        <List sx={{ display: 'flex', gap: '20px', flexDirection: 'column' }}>\r\n          {posts?.map(item => (\r\n            <ListItem key={item.id} disablePadding sx={{ border: `2px solid ${mode == 'dark' ? 'grey' : '#1976D2'}`, borderRadius: '5px' }}>\r\n              <ListItemButton sx={{ display: 'inline' }}>\r\n                <Post post={item} />\r\n              </ListItemButton>\r\n            </ListItem>\r\n          ))}\r\n        </List>\r\n        {posts && <Box ref={ref} sx={{ height: '1px' }} />}\r\n        <Snackbar anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }} open={statusPosts} autoHideDuration={6000}\r\n          onClose={() => setPostsStatus(false)}>\r\n          <Alert onClose={() => setPostsStatus(false)} severity=\"info\" sx={{ width: '100%', backgroundColor: '#0288D1', color: '#fff' }}>\r\n            <Typography>Все посты получены!</Typography>\r\n          </Alert>\r\n        </Snackbar>\r\n        <Snackbar anchorOrigin={{ vertical: 'top', horizontal: 'center' }} open={notFound}\r\n          onClose={() => setNotFound(false)}\r\n          autoHideDuration={5000}>\r\n          <Alert onClose={() => setNotFound(false)} severity=\"error\" >\r\n            <Typography>Пользователь не найден</Typography>\r\n          </Alert>\r\n        </Snackbar>\r\n      </Container>\r\n    </>\r\n  )\r\n})\r\n\r\nexport default PostList","import React, { Dispatch, FC, SetStateAction, memo, useEffect, useState } from 'react'\r\nimport InputLabel from '@mui/material/InputLabel';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport Select, { SelectChangeEvent } from '@mui/material/Select';\r\nimport Button from '@mui/material/Button/Button';\r\nimport { useTheme } from '@mui/material';\r\nimport { usersAPI } from '../../../api/usersAPI';\r\nimport { UsersType } from '../../../types/usersTS';\r\nimport { PropsUser } from '../Navbar';\r\n\r\n  /* \r\n    Зачастую запросы на сервер делаются строго в строковом формате, поэтому операции мы проводим над типом number, а уже итоговый результат приобразуем\r\n    в строку usersAPI.getUsers(`${1}`)\r\n  */\r\n\r\nconst UsersFilter: FC<PropsUser> = memo(({ setUser, currUser }) => {\r\n  const { palette: { mode } } = useTheme()\r\n  const [users, setUsers] = useState<UsersType[] | null>(null)\r\n  useEffect(() => {\r\n    const fetchUsers = async () => {\r\n      let response = await usersAPI.getUsers(`${1}`)\r\n      setUsers(response)\r\n    }\r\n    fetchUsers()\r\n  }, [])\r\n  return (\r\n    <FormControl sx={{ display: 'flex', gap: '20px' }}>\r\n      <InputLabel id=\"demo-simple-select-label\">Пользователь</InputLabel>\r\n      <Select sx={{ width: '250px' }}\r\n        labelId=\"demo-simple-select-label\"\r\n        id=\"demo-simple-select\"\r\n        label=\"Пользователи\"\r\n        value={currUser as string}\r\n        onChange={(e: SelectChangeEvent<string>) => setUser(e.target.value as string)}>\r\n        {users?.map(item => <MenuItem value={item.id} key={item.id}>{item.name}</MenuItem>)}\r\n      </Select>\r\n      <Button sx={{ border: `.1px solid ${mode == 'dark' ? 'grey' : '#1976D2'}` }} variant='text' onClick={() => setUser(null)}>\r\n        Все пользователи\r\n      </Button>\r\n    </FormControl>\r\n  )\r\n})\r\n\r\nexport default UsersFilter","import FormControl from '@mui/material/FormControl'\r\nimport InputLabel from '@mui/material/InputLabel'\r\nimport MenuItem from '@mui/material/MenuItem'\r\nimport Select, { SelectChangeEvent } from '@mui/material/Select'\r\nimport { FC, memo } from 'react'\r\nimport { PropsLimit } from '../Navbar'\r\n\r\nconst LimitFilter: FC<PropsLimit> = memo(({ currLimit, setLimit }) => {\r\n  const limit = ['10', '15', '20', '25', '30']\r\n  return (\r\n    <FormControl>\r\n      <InputLabel id=\"demo-simple-select-label\">Лимит запросов</InputLabel>\r\n      <Select sx={{ width: '250px' }}\r\n        labelId=\"demo-simple-select-labels\"\r\n        id=\"demo-simple-select\"\r\n        label=\"Лимит постов\"\r\n        value={currLimit as string}\r\n        onChange={(e: SelectChangeEvent<string>) => setLimit(e.target.value as string)}\r\n      >\r\n        {limit.map(i => <MenuItem value={i} key={i}>{i}</MenuItem>)}\r\n      </Select>\r\n    </FormControl>\r\n\r\n  )\r\n})\r\n\r\nexport default LimitFilter","import { Container } from '@mui/material'\r\nimport Box from '@mui/material/Box'\r\nimport React, { Dispatch, FC, SetStateAction } from 'react'\r\nimport UsersFilter from './UsersFilter/UsersFilter'\r\nimport LimitFilter from './LimitFilter/LimitFilter'\r\n\r\nexport type PropsUser = {\r\n  setUser: Dispatch<SetStateAction<string | null>>\r\n  currUser: string | null\r\n}\r\n\r\nexport type PropsLimit = {\r\n  setLimit: Dispatch<SetStateAction<string>>\r\n  currLimit: string\r\n}\r\n\r\nconst Navbar: FC<PropsUser & PropsLimit> = ({ setUser, currUser, currLimit, setLimit}) => {\r\n  return (\r\n    <Container maxWidth={false} disableGutters>\r\n      <Box sx={{ display: 'flex', justifyContent: 'center', flexDirection: 'column', alignItems: 'center', gap: '20px' }}>\r\n        <LimitFilter currLimit={currLimit} setLimit={setLimit} />\r\n        <UsersFilter currUser={currUser} setUser={setUser} />\r\n      </Box>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Navbar","import React, { useState, FC, memo } from 'react'\r\nimport { PostType } from '../../types/postsTS'\r\nimport PostList from './PostList/PostList'\r\nimport { Box, Container } from '@mui/material'\r\nimport Navbar from '../Navbar/Navbar'\r\n\r\nconst Posts: FC = memo(() => {\r\n  const [posts, setPosts] = useState<PostType[] | null>(null)\r\n  const [currUser, setUser] = useState<string | null>(null)\r\n  const [currLimit, setLimit] = useState<string>('20')\r\n  return (\r\n    <Container disableGutters maxWidth={'xl'} sx={{ mt: '20px', minHeight: '100vh' }}>\r\n      <Box sx={{ px: '20px', gap: '30px', display: 'flex', flexDirection: { 'xs': 'column', 'md': 'row' } }}>\r\n        <Box>\r\n          <Navbar setLimit={setLimit} currLimit={currLimit} currUser={currUser} setUser={setUser} />\r\n        </Box>\r\n        <Box>\r\n          <PostList currLimit={currLimit} currUser={currUser} setUser={setUser} setPosts={setPosts} posts={posts} />\r\n        </Box>\r\n      </Box>\r\n    </Container>\r\n  )\r\n})\r\n\r\nexport default Posts"],"names":["instanceAPI","axios","create","baseURL","headers","postsAPI","getPosts","limit","page","get","concat","then","res","data","catch","err","getUserPosts","id","getCurrPost","usersAPI","getUsers","getCurrUser","_ref","post","navigate","useNavigate","_jsx","Container","disableGutters","maxWidth","onClick","replace","children","_jsxs","Box","sx","display","gap","flexDirection","Typography","title","body","PostList","memo","posts","setPosts","currUser","setUser","currLimit","mode","useTheme","palette","_useSearchParams","useSearchParams","_useSearchParams2","_slicedToArray","searchParams","setSearchParams","_useState","useState","_useState2","currPage","setPage","_useState3","_useState4","notFound","setNotFound","location","useLocation","query","_useState5","_useState6","statusPosts","setPostsStatus","_useInView","useInView","threshold","ref","inView","useEffect","fetchUserPosts","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","result","actualPage","_result","wrap","_context","prev","next","sent","userId","URLSearchParams","stop","apply","arguments","search","parsed","Object","fromEntries","_toConsumableArray","fetchMorePosts","_ref3","_callee2","_context2","length","_Fragment","List","map","item","ListItem","disablePadding","border","borderRadius","ListItemButton","Post","height","Snackbar","anchorOrigin","vertical","horizontal","open","autoHideDuration","onClose","Alert","severity","width","backgroundColor","color","UsersFilter","users","setUsers","fetchUsers","response","FormControl","InputLabel","Select","labelId","label","value","onChange","e","target","MenuItem","name","Button","variant","setLimit","i","justifyContent","alignItems","LimitFilter","mt","minHeight","px","Navbar"],"sourceRoot":""}